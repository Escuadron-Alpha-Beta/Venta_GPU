{"ast":null,"code":"/*\r\n    This file is part of web3.js.\r\n\r\n    web3.js is free software: you can redistribute it and/or modify\r\n    it under the terms of the GNU Lesser General Public License as published by\r\n    the Free Software Foundation, either version 3 of the License, or\r\n    (at your option) any later version.\r\n\r\n    web3.js is distributed in the hope that it will be useful,\r\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n    GNU Lesser General Public License for more details.\r\n\r\n    You should have received a copy of the GNU Lesser General Public License\r\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\r\n*/\n\n/**\r\n * @file index.js\r\n * @author Fabian Vogelsteller <fabian@ethereum.org>\r\n * @date 2017\r\n */\nvar requestManager = require(\"web3-core-requestmanager\");\n\nvar extend = require(\"./extend\");\n\nvar packageInit = function packageInit(pkg, args) {\n  args = Array.prototype.slice.call(args);\n\n  if (!pkg) {\n    throw new Error('You need to instantiate using the \"new\" keyword.');\n  } // make property of pkg._provider, which can properly set providers\n\n\n  Object.defineProperty(pkg, 'currentProvider', {\n    get: function get() {\n      return pkg._provider;\n    },\n    set: function set(value) {\n      return pkg.setProvider(value);\n    },\n    enumerable: true,\n    configurable: true\n  }); // inherit from parent package or create a new RequestManager\n\n  if (args[0] && args[0]._requestManager) {\n    pkg._requestManager = args[0]._requestManager;\n  } else {\n    pkg._requestManager = new requestManager.Manager(args[0], args[1]);\n  } // add givenProvider\n\n\n  pkg.givenProvider = requestManager.Manager.givenProvider;\n  pkg.providers = requestManager.Manager.providers;\n  pkg._provider = pkg._requestManager.provider; // add SETPROVIDER function (don't overwrite if already existing)\n\n  if (!pkg.setProvider) {\n    pkg.setProvider = function (provider, net) {\n      pkg._requestManager.setProvider(provider, net);\n\n      pkg._provider = pkg._requestManager.provider;\n      return true;\n    };\n  }\n\n  pkg.setRequestManager = function (manager) {\n    pkg._requestManager = manager;\n    pkg._provider = manager.provider;\n  }; // attach batch request creation\n\n\n  pkg.BatchRequest = requestManager.BatchManager.bind(null, pkg._requestManager); // attach extend function\n\n  pkg.extend = extend(pkg);\n};\n\nvar addProviders = function addProviders(pkg) {\n  pkg.givenProvider = requestManager.Manager.givenProvider;\n  pkg.providers = requestManager.Manager.providers;\n};\n\nmodule.exports = {\n  packageInit: packageInit,\n  addProviders: addProviders\n};","map":null,"metadata":{},"sourceType":"script"}